name: Kernel Builder Clang only

on:
  workflow_dispatch:
    inputs:
      KERNEL_URL:
        description: 'Enter your Kernel Link'
        required: true
        default: 'https://github.com/cumaRull/kernel_realme_RMX3191.git'

      KERNEL_BRANCH:
        description: 'Enter your Kernel branch'
        required: true
        default: 'master'
         
      KERNEL_DEFCONFIG:
        description: 'Enter the defconfig available in your kernel'
        required: true
        default: 'RMX3191_defconfig'

      KBUILD_USER:
        description: 'Enter the custom username build available in your kernel'
        required: true
        default: 'cumaRull'
        
      CLANG_URL:
        description: 'Clang Url'
        required: true
        default: 'https://github.com/picasso09/clang-12.0.5-r416183b.git'
      WITH_KERNEL_SU:
        description: 'With kernelsu?, Dont activate it if the kernel doesnt support it '
        required: true
        default: 'false'
      ZIP_NAME:
        description: 'Name for the zip file'
        required: true
        default: 'TridentNothDeath-Even' 
      ANYKERNEL_URL:
        description: 'YOUR ANYKERNEL LINK'
        required: true
        default: 'https://github.com/cumaRull/AnyKernel3.git -b master'
      
                  
      
      

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
        echo "::group::User Environment Variables"
        echo "Kernel URL: ${{ github.event.inputs.KERNEL_URL }}"
        echo "Kernel BRANCH: ${{ github.event.inputs.KERNEL_BRANCH }}"
        echo "Kernel Defconfig: ${{ github.event.inputs.KERNEL_DEFCONFIG }}"
        echo "Clang URL: ${{ github.event.inputs.CLANG_URL }}"
        echo "With Kernelsu?: ${{ github.event.inputs.WITH_KERNEL_SU }}"
        echo "Zip name: ${{ github.event.inputs.ZIP_NAME }}"
        echo "Downloading AnyKernel: ${{ github.event.inputs.ANYKERNEL_URL }}"
        echo "::endgroup::"
 
    # You might want to Checkout your repo first, but not mandatory
    - name: Check Out
      uses: actions/checkout@v3
    # Cleanup The Actioecho "With Kernelsu?: ${{ github.event.inputs.WITH_KERNEL_SU }}"ns Workspace Using Custom Composite Run Actions
    
    - name: Cleanup
     # uses: rokibhasansagar/slimhub_actions@main
      run: rm -rf ${PWD}/*
      # That's it! Now use your normal steps
    - name: Prepare the environment
      run: |
          sudo apt-get update && sudo apt-get upgrade
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar
          sudo apt-get -y install gcc llvm lld python-is-python3 clang gcc-aarch64-linux-gnu git libxml2 device-tree-compiler default-jre automake lzop bison gperf build-essential zip curl zlib1g-dev libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make cpio optipng bc libstdc++6 libncurses5 wget python3 python3-pip libssl-dev rsync flex git-lfs libz3-dev libz3-4 axel tar binutils-dev ca-certificates ccache cmake file libelf-dev ninja-build python3-dev texinfo u-boot-tools xz-utils libarchive-tools software-properties-common build-essential python-is-python3 libssl-dev openssl ssh
          sudo apt-get install wget -y

              
    - name: Set Properties
      run: |
        echo "BUILD_DATE=$(TZ=Asia/Jakarta date +%Y-%m-%d )" >> $GITHUB_ENV
        echo "BUILD_TIME=$(TZ=Asia/Jakarta date +%H:%M:%S)" >> $GITHUB_ENV
        
      
    - name: Initialize user
      run: |
        git config --global user.name "cumaRull"
        git config --global user.email "rulsmods@gmail.com"

    
    - name: Create Folder
      run: |
       mkdir -p android && cd android
       # git clone --depth=1 ${{ github.event.inputs.AARCH64_URL }} ./aarch64-gcc
       # git clone --depth=1 ${{ github.event.inputs.ARM_LINUX_URL }} ./arm-gcc
       
    - name: Clone Clang
      working-directory: android/
      run: |
       git clone --depth=1 ${{ github.event.inputs.CLANG_URL }} ./clang
       # tar -xvzf *.gz
       # rm -f *.gz
       
    - name: Clone kernel tree
      working-directory: android/
      run: |
       git clone --depth=1 --recurse-submodules -j8 --single-branch ${{ github.event.inputs.KERNEL_URL }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ./kernel
       

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 32

    - name: Setup KernelSU
      working-directory: android/kernel
      if : ${{ github.event.inputs.WITH_KERNEL_SU == 'true' }}
      run: |
          rm -rf /KernelSU
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          echo -e "CONFIG_KPROBES=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
          echo -e "CONFIG_HAVE_KPROBES=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
          echo -e "CONFIG_KPROBE_EVENTS=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
          echo -e "CONFIG_KSU=y" >> arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
          cat arch/arm64/configs/${{ github.event.inputs.KERNEL_DEFCONFIG }}
      continue-on-error: true    
      
    - name: Notify in Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_CHAT_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        photo: '${GITHUB_WORKSPACE}/tridentnotdeath.png'
        format: html
        message: |
              
              <b>Build Started With:</b> GithubAction
              <b>USING DEFCONFIG:</b> ${{ github.event.inputs.KERNEL_DEFCONFIG }}
              <b>Started On:</b> ${{ env.BUILD_DATE }} | ${{ env.BUILD_TIME }}
              
              
              
    - name: Building Kernel
      working-directory: android/kernel
      run: |
       rm -rf out
       mkdir -p out
       export USE_CCACHE=1 
       export CCACHE_COMPRESS=1 
       export CCACHE_MAXSIZE=50G 
       export ARCH=arm64
       export TZ=Asia/Jakarta
       export KBUILD_BUILD_USER=${{ github.event.inputs.KBUILD_USER }}
       export KBUILD_BUILD_HOST=${{ github.event.inputs.KBUILD_HOST }}
       make O=out ARCH=arm64 ${{ github.event.inputs.KERNEL_DEFCONFIG }} 
       make -j$(nproc --all) O=out ARCH=arm64 ${{ github.event.inputs.KERNEL_DEFCONFIG }} 
       PATH="${GITHUB_WORKSPACE}/android/clang/bin:${PATH}" \
       make -j$(nproc --all) O=out \
       AR=llvm-ar \
       AS=llvm-as \
       NM=llvm-nm \
       STRIP=llvm-strip \ 
       OBJCOPY=llvm-objcopy  \
       OBJDUMP=llvm-objdump \
       READELF=llvm-readelf  \
       STRIP=llvm-strip \
       ARCH=arm64 \
       CC="clang" \
       LLVM=1 \
       LLVM_IAS=1 \
       LD=ld.lld \
       CLANG_TRIPLE="aarch64-linux-gnu-" \
       CROSS_COMPILE="aarch64-linux-gnu-" \
       CROSS_COMPILE_ARM32="arm-linux-gnueabi-" \
       CROSS_COMPILE_COMPAT="arm-linux-gnueabi-" \
       CONFIG_NO_ERROR_ON_MISMATCH=y \
       CONFIG_DEBUG_SECTION_MISMATCH=y \
       V=0 2>&1 | tee out/build.log
      continue-on-error: true

        


    - name: Send BuildLog to Telegram
      working-directory: android/
      run: |
              img=kernel/out/build.log
              curl -F document=@$img "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
              -F chat_id="${{ secrets.TG_CHAT_ID }}" \
              -F parse_mode=html \
              -F disable_web_page_preview=true
      continue-on-error: true
      
    - name: Zipping Kernel
      working-directory: android/
      run: | 
            git clone --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} ./AnyKernel
            cd kernel/out/arch/arm64/boot && cp -r Image.gz-dtb ${GITHUB_WORKSPACE}/android/AnyKernel
            cd ${GITHUB_WORKSPACE}/android/AnyKernel
            zip -r9 ${{ github.event.inputs.ZIP_NAME }}-${{ env.BUILD_DATE }}-${{ env.BUILD_TIME }}.zip * -x .git README.md *placeholder

      continue-on-error: true
    - name: Notify If completed
      run: | 
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
              -d chat_id="${{ secrets.TG_CHAT_ID }}" \
              -d text="<b>Hello ${{ github.actor }} Your Build Has Completed!!! And Push To Github Release</b>%0AUSING DEFCONFIG:<b>${{ github.event.inputs.KERNEL_DEFCONFIG }}</b>%0AStarted On: <b>${{ env.BUILD_DATE }}</b> | <b>${{ env.BUILD_TIME }}</b>" \
              -d parse_mode=html \
              -d disable_web_page_preview=true
              
    - name: Test Upload to Telegram
      working-directory: android/
      run: |
              img=AnyKernel/${{ github.event.inputs.ZIP_NAME }}-${{ env.BUILD_DATE }}-${{ env.BUILD_TIME }}.zip
              curl -F document=@$img "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendDocument" \
              -F chat_id="${{ secrets.TG_CHAT_ID }}" \
              -F parse_mode=html \
              -F disable_web_page_preview=true
      continue-on-error: true
      
    
